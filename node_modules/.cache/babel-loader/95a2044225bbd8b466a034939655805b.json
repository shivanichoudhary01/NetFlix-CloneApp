{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/lenovo/Desktop/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/lenovo/Desktop/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/lenovo/Desktop/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import axios from'./axio';import React,{useEffect,useState}from'react';import\"./Row.css\";import YouTube from'react-youtube';import movieTrailer from\"movie-trailer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];var base_url=\"https://image.tmdb.org/t/p/original/\";useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"100%\",playVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get('v'));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"row__title\",children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return(isLargeRow&&movie.poster_path||!isLargeRow&&movie.backdrop_path)&&/*#__PURE__*/_jsx(\"img\",{className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),onClick:function onClick(){return handleClick(movie);},src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["C:/Users/lenovo/desktop/netflix-clone/src/Row.js"],"names":["axios","React","useEffect","useState","YouTube","movieTrailer","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","base_url","fetchData","get","request","data","results","opts","height","width","playVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":"idAAA,MAAOA,CAAAA,KAAP,KAAkB,QAAlB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,C,wFAEA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,CAC1C,cAA4BN,QAAQ,CAAC,EAAD,CAApC,wCAAOO,MAAP,eAAeC,SAAf,eACA,eAAoCR,QAAQ,CAAC,EAAD,CAA5C,yCAAOS,UAAP,eAAmBC,aAAnB,eACA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CACAZ,SAAS,CAAC,UAAM,SACGa,CAAAA,SADH,qIACZ,qKAC0Bf,CAAAA,KAAK,CAACgB,GAAN,CAAUR,QAAV,CAD1B,QACUS,OADV,eAEIN,SAAS,CAACM,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFJ,gCAGWF,OAHX,wDADY,4CAMZF,SAAS,GACZ,CAPQ,CAON,CAACP,QAAD,CAPM,CAAT,CASA,GAAMY,CAAAA,IAAI,CAAG,CACTC,MAAM,CAAE,KADC,CAETC,KAAK,CAAE,MAFE,CAGTC,QAAQ,CAAE,CACNC,QAAQ,CAAE,CADJ,CAHD,CAAb,CAOA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC3B,GAAId,UAAJ,CAAgB,CACZC,aAAa,CAAC,EAAD,CAAb,CACH,CAFD,IAGK,CACDR,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACKC,IADL,CACU,SAACC,GAAD,CAAS,CACX,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACApB,aAAa,CAACiB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb,CACH,CAJL,EAIOkB,KAJP,CAIa,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX,EAJb,EAKH,CACJ,CAXD,CAaA,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,WAAI,SAAS,CAAC,YAAd,UAA4B5B,KAA5B,EADJ,cAEI,YAAK,SAAS,CAAC,cAAf,UAEKG,MAAM,CAAC4B,GAAP,CAAW,SAAAZ,KAAK,QACb,CAAEjB,UAAU,EAAIiB,KAAK,CAACa,WAArB,EACI,CAAC9B,UAAD,EAAeiB,KAAK,CAACc,aAD1B,gBAGI,YAEI,SAAS,uBAAiB/B,UAAU,EAAI,kBAA/B,CAFb,CAII,OAAO,CAAE,yBAAMgB,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAJb,CAKI,GAAG,WAAKZ,QAAL,SAAgBL,UAAU,CAAGiB,KAAK,CAACa,WAAT,CAAuBb,KAAK,CAACc,aAAvD,CALP,CAMY,GAAG,CAAEd,KAAK,CAACC,IANvB,EAGSD,KAAK,CAACe,EAHf,CAJS,EAAhB,CAFL,EAFJ,CAiBK7B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEQ,IAApC,EAjBnB,GADJ,CAqBH,CAED,cAAed,CAAAA,GAAf","sourcesContent":["import axios from './axio';\r\nimport React, { useEffect, useState } from 'react';\r\nimport \"./Row.css\";\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl(\"\");\r\n        }\r\n        else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then((url) => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                }).catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"row__title\">{title}</h2>\r\n            <div className=\"row__posters\">\r\n\r\n                {movies.map(movie =>\r\n                    ((isLargeRow && movie.poster_path) ||\r\n                        (!isLargeRow && movie.backdrop_path)) &&\r\n                    (\r\n                        <img\r\n\r\n                            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                            key={movie.id}\r\n                            onClick={() => handleClick(movie)}\r\n                            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                                }`} alt={movie.name} />\r\n                    ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}