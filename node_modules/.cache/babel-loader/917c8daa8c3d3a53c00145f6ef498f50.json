{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\netflix-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport axios from './axio';\nimport React, { useEffect, useState } from 'react';\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"row__title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => isLargeRow && movie.poster_path || !isLargeRow && movie.backdrop_path && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/netflix-clone/src/Row.js"],"names":["axios","React","useEffect","useState","Row","title","fetchUrl","isLargeRow","movies","setMovies","base_url","fetchData","request","get","data","results","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,QAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMO,QAAQ,GAAG,sCAAjB;AACAR,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUP,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACG,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAPQ,EAON,CAACL,QAAD,CAPM,CAAT;AASA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAEKG,MAAM,CAACQ,GAAP,CAAWC,KAAK,IACZV,UAAU,IAAIU,KAAK,CAACC,WAArB,IACC,CAACX,UAAD,IAAeU,KAAK,CAACE,aAAtB,iBAEI;AACI,QAAA,SAAS,EAAG,eAAcZ,UAAU,IAAI,kBAAmB,EAD/D;AAGI,QAAA,GAAG,EAAG,GAAEG,QAAS,GAAEH,UAAU,GAAGU,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aACrD,EAJT;AAIY,QAAA,GAAG,EAAEF,KAAK,CAACG;AAJvB,SAESH,KAAK,CAACI,EAFf;AAAA;AAAA;AAAA;AAAA,cAJP;AAFL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GA/BQjB,G;;KAAAA,G;AAiCT,eAAeA,GAAf","sourcesContent":["import axios from './axio';\r\nimport React, { useEffect, useState } from 'react';\r\nimport \"./Row.css\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"row__title\">{title}</h2>\r\n            <div className=\"row__posters\">\r\n\r\n                {movies.map(movie =>\r\n                    (isLargeRow && movie.poster_path) ||\r\n                    (!isLargeRow && movie.backdrop_path) &&\r\n                    (\r\n                        <img\r\n                            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                            key={movie.id}\r\n                            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                                }`} alt={movie.name} />\r\n                    ))}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}