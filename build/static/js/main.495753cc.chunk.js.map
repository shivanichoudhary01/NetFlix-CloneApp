{"version":3,"sources":["Nav.js","axio.js","Requests.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchToprated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","poster_path","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","id","videoId","opts","height","width","playVars","autoplay","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignupScreen","emailRef","useRef","passRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","action","userSlice","createSlice","initialState","user","reducers","login","state","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.495753cc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./Nav.css\"\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n    const history = useHistory();\r\n    const transitionNavBar = () => {\r\n        if (window.scrollY > 100) {\r\n            handleShow(true);\r\n        }\r\n        else {\r\n            handleShow(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", transitionNavBar);\r\n        return () => window.removeEventListener(\"scroll\", transitionNavBar)\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <div className=\"nav__contents\">\r\n                <img\r\n                    onClick={() => history.push(\"/\")}\r\n                    className=\"nav__logo\"\r\n                    src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n                    alt=\"\" />\r\n\r\n                <img\r\n                    onClick={() =>\r\n                        history.push(\"/profile\")\r\n                    }\r\n                    className=\"nav__avatar\"\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Netflix-avatar.png/120px-Netflix-avatar.png\"\r\n                    alt=\"\" />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","const API_KEY = \"bb74a8a6bf464c82e61457b0c857366a\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchToprated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport \"./Banner.css\"\r\nimport axios from './axio';\r\nimport requests from './Requests';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            )\r\n            return request;\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    console.log(movie)\r\n    function truncate(string, n) {\r\n        return string?.length > n ? string.substr(0, n - 1) + '...' : string;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" style={\r\n            {\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\r\n                backgroundPosition: \"center center\"\r\n\r\n            }\r\n        }>\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">MyList</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n            <div className=\"banner--fadeButton\" />\r\n        </header >\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import axios from './axio';\r\nimport React, { useEffect, useState } from 'react';\r\nimport \"./Row.css\";\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl(\"\");\r\n        }\r\n        else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then((url) => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                }).catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"row__title\">{title}</h2>\r\n            <div className=\"row__posters\">\r\n\r\n                {movies.map(movie =>\r\n                    ((isLargeRow && movie.poster_path) ||\r\n                        (!isLargeRow && movie.backdrop_path)) &&\r\n                    (\r\n                        <img\r\n\r\n                            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                            key={movie.id}\r\n                            onClick={() => handleClick(movie)}\r\n                            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                                }`} alt={movie.name} />\r\n                    ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\r\nimport \"./HomeScreen.css\";\r\nimport Nav from '../Nav';\r\nimport Banner from '../Banner';\r\nimport requests from '../Requests';\r\nimport Row from '../Row';\r\nfunction HomeScreen() {\r\n    return (\r\n        <div className=\"homescreen\">\r\n            {/*Navbar */}\r\n            <Nav />\r\n            {/*Banner*/}\r\n            <Banner />\r\n\r\n            {/*Row*/}\r\n            <Row\r\n                title=\"NETFLIX ORIGINALS\"\r\n                fetchUrl={requests.fetchNetflixOriginals}\r\n                isLargeRow\r\n            />\r\n            <Row\r\n                title=\"TOP RATED\"\r\n                fetchUrl={requests.fetchToprated}\r\n            />\r\n\r\n            <Row\r\n                title=\"ACTION MOVIES\"\r\n                fetchUrl={requests.fetchActionMovies}\r\n\r\n            />\r\n            <Row\r\n                title=\"COMEDY MOVIES\"\r\n                fetchUrl={requests.fetchComedyMovies}\r\n\r\n            />\r\n            <Row\r\n                title=\"HORROR MOVIES\"\r\n                fetchUrl={requests.fetchHorrorMovies}\r\n            />\r\n            <Row\r\n                title=\"ROMANCE MOVIES\"\r\n                fetchUrl={requests.fetchRomanceMovies}\r\n            />\r\n            <Row\r\n                title=\"DOCUMENTARIES\"\r\n                fetchUrl={requests.fetchDocumentaries}\r\n            />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import firebase from 'firebase';\r\n// import \"firebase/firestore\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBtgvBfLvVfnwB6HozYQXljopFKfGK1EU0\",\r\n    authDomain: \"netflix-clone-92c18.firebaseapp.com\",\r\n    projectId: \"netflix-clone-92c18\",\r\n    storageBucket: \"netflix-clone-92c18.appspot.com\",\r\n    messagingSenderId: \"446197332613\",\r\n    appId: \"1:446197332613:web:15235937f7daf9009087ec\"\r\n};\r\n\r\nconst app = firebase.initializeApp(firebaseConfig);\r\nconst auth = app.auth();\r\nconst db = firebase.firestore();\r\n\r\nexport default auth;\r\nexport { db };\r\n\r\n","import React, { useRef } from 'react'\r\n\r\nimport auth from '../firebase.js';\r\nimport './SignupScreen.css'\r\n\r\nfunction SignupScreen() {\r\n\r\n    const emailRef = useRef(null);\r\n    const passRef = useRef(null);\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passRef.current.value\r\n        )\r\n            .then((authUser) => {\r\n                console.log(authUser);\r\n            })\r\n            .catch((error) => {\r\n                alert(error.message);\r\n            });\r\n    };\r\n    const signIn = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passRef.current.value\r\n        )\r\n            .then((authUser) => {\r\n                console.log(authUser);\r\n            })\r\n            .catch((error) => alert(error.message));\r\n    };\r\n\r\n    return (\r\n        <div className='signupScreen'>\r\n            <form >\r\n                <h1>Sign In</h1>\r\n                <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\r\n                <input ref={passRef} type=\"password\" placeholder=\"Password\" />\r\n                <button type=\"submit\" onClick={signIn}>Sign In</button>\r\n                <h4>\r\n                    <span className=\"signupScreen__gray\">New to Netflix? </span>\r\n                    <span className=\"signupScreen__link\" onClick={register}>Sign Up now.</span></h4>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignupScreen\r\n","import React, { useState } from 'react'\r\nimport \"./LoginScreen.css\"\r\nimport SignupScreen from './SignupScreen';\r\n\r\nfunction LoginScreen() {\r\n    const [signIn, setSignIn] = useState(false);\r\n    return (\r\n        <div className=\"loginScreen\">\r\n            <div className=\"loginScreen__background\">\r\n                <img src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" className=\"loginScreen__logo\" />\r\n                <button onClick={() => setSignIn(true)}\r\n                    className=\"loginScreen__button\">\r\n                    Sign In\r\n                </button>\r\n                <div className=\"loginScreen__gradient\"></div>\r\n            </div>\r\n            {/* login body */}\r\n            <div className=\"loginScreen__body\">\r\n                {\r\n                    signIn ? (\r\n                        <SignupScreen />\r\n                    ) : (\r\n                        <>\r\n                            <h1>Unlimited films,TV programmes and more.</h1>\r\n                            <h2>Watch anywhere,Cancel at anytime</h2>\r\n                            <h3>Ready to watch? Enter your email to create or restart your membership</h3>\r\n                            <div className=\"loginScreen__input\">\r\n                                <form action=\"\">\r\n                                    <input type=\"email\" placeholder=\"Email Address\" />\r\n                                    <button onClick={() => setSignIn(true)} className=\"loginScreen__getStarted\">\r\n                                        GET STARTED\r\n                                    </button>\r\n                                </form>\r\n                            </div>\r\n                        </>\r\n\r\n                    )\r\n                }\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React from 'react'\r\nimport './ProfileScreen.css';\r\nimport Nav from \"../Nav\";\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport auth from '../firebase';\r\n\r\nfunction ProfileScreen() {\r\n    const user = useSelector(selectUser)\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav />\r\n            <div className=\"profileScreen__body\">\r\n                <h1>Signing Out</h1>\r\n                <div className=\"profileScreen__info\">\r\n                    <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"\" />\r\n                    <div className=\"profileScreen__details\">\r\n                        <h2>{user.email}</h2>\r\n                        <div className=\"profileScreen__plans\"></div>\r\n\r\n                        <button\r\n                            onClick={() => auth.signOut()}\r\n                            className=\"profileScreen__signOut\">Sign Out</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen;\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport ProfileScreen from './screens/ProfileScreen';\nimport auth from './firebase.js';\nimport { login, logout, selectUser } from \"./features/userSlice\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      if (userAuth) {\n        //loggedIn\n        console.log(userAuth);\n        dispatch(\n          login({\n            uid: userAuth.uid,\n            email: userAuth.email,\n          })\n        );\n      }\n      else {\n        //loggedout\n        dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n  }, [dispatch])\n\n  return (\n    <div className=\"app\">\n\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ) : (\n          <Switch>\n            <Route path='/profile'>\n              <ProfileScreen />\n            </Route>\n            <Route path=\"/\">\n              <HomeScreen />\n            </Route>\n          </Switch>)}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}